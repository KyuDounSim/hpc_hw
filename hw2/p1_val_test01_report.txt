Valgrind outputs the following on val_test01.cpp,

        g++ -g val_test01_solved.cpp -o val_test01_solved && valgrind --leak-check=full --track-origins=yes ./val_test01_solved
        ==27600== Memcheck, a memory error detector
        ==27600== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
        ==27600== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
        ==27600== Command: ./val_test01_solved
        ==27600== 

        TEST01
        C++ version.
        A sample code for analysis by VALGRIND.
        0  1
        1  1
        2  2
        3  3
        4  5
        5  8
        6  13
        7  21
        8  34
        9  55
        ==27600== Invalid write of size 4
        ==27600==    at 0x40097F: f(int) (val_test01_solved.cpp:44)
        ==27600==    by 0x400831: main (val_test01_solved.cpp:19)
        ==27600==  Address 0x5a25068 is 0 bytes after a block of size 40 alloc'd
        ==27600==    at 0x4C29F73: malloc (vg_replace_malloc.c:309)
        ==27600==    by 0x400882: f(int) (val_test01_solved.cpp:34)
        ==27600==    by 0x400831: main (val_test01_solved.cpp:19)
        ==27600== 
        ==27600== Invalid read of size 4
        ==27600==    at 0x400995: f(int) (val_test01_solved.cpp:45)
        ==27600==    by 0x400831: main (val_test01_solved.cpp:19)
        ==27600==  Address 0x5a25068 is 0 bytes after a block of size 40 alloc'd
        ==27600==    at 0x4C29F73: malloc (vg_replace_malloc.c:309)
        ==27600==    by 0x400882: f(int) (val_test01_solved.cpp:34)
        ==27600==    by 0x400831: main (val_test01_solved.cpp:19)
        ==27600== 
        10  89
        ==27600== Mismatched free() / delete / delete []
        ==27600==    at 0x4C2BB8F: operator delete[](void*) (vg_replace_malloc.c:651)
        ==27600==    by 0x4009F9: f(int) (val_test01_solved.cpp:48)
        ==27600==    by 0x400831: main (val_test01_solved.cpp:19)
        ==27600==  Address 0x5a25040 is 0 bytes inside a block of size 40 alloc'd
        ==27600==    at 0x4C29F73: malloc (vg_replace_malloc.c:309)
        ==27600==    by 0x400882: f(int) (val_test01_solved.cpp:34)
        ==27600==    by 0x400831: main (val_test01_solved.cpp:19)
        ==27600== 

        TEST01
        Normal end of execution.
        ==27600== 
        ==27600== HEAP SUMMARY:
        ==27600==     in use at exit: 0 bytes in 0 blocks
        ==27600==   total heap usage: 1 allocs, 1 frees, 40 bytes allocated
        ==27600== 
        ==27600== All heap blocks were freed -- no leaks are possible
        ==27600== 
        ==27600== For lists of detected and suppressed errors, rerun with: -s
        ==27600== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)

The first error, I see that there are errors regarding invalid read/write from the f(int) function,
so I look for any loops that possibly have an out of bound memory access. 

At line 44, "i <= n" was changed to "i < n". Then running valgrind gives the following output.

        g++ -g val_test01_solved.cpp -o val_test01_solved && valgrind --leak-check=full --track-origins=yes ./val_test01_solved
        ==32018== Memcheck, a memory error detector
        ==32018== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
        ==32018== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
        ==32018== Command: ./val_test01_solved
        ==32018== 

        TEST01
        C++ version.
        A sample code for analysis by VALGRIND.
        0  1
        1  1
        2  2
        3  3
        4  5
        5  8
        6  13
        7  21
        8  34
        9  55
        ==32018== Mismatched free() / delete / delete []
        ==32018==    at 0x4C2BB8F: operator delete[](void*) (vg_replace_malloc.c:651)
        ==32018==    by 0x4009F9: f(int) (val_test01_solved.cpp:50)
        ==32018==    by 0x400831: main (val_test01_solved.cpp:19)
        ==32018==  Address 0x5a25040 is 0 bytes inside a block of size 40 alloc'd
        ==32018==    at 0x4C29F73: malloc (vg_replace_malloc.c:309)
        ==32018==    by 0x400882: f(int) (val_test01_solved.cpp:34)
        ==32018==    by 0x400831: main (val_test01_solved.cpp:19)
        ==32018== 

        TEST01
        Normal end of execution.
        ==32018== 
        ==32018== HEAP SUMMARY:
        ==32018==     in use at exit: 0 bytes in 0 blocks
        ==32018==   total heap usage: 1 allocs, 1 frees, 40 bytes allocated
        ==32018== 
        ==32018== All heap blocks were freed -- no leaks are possible
        ==32018== 
        ==32018== For lists of detected and suppressed errors, rerun with: -s
        ==32018== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Here, Valgrind is talking how there is a mismatched free() and delete(). free() should be used
for any memory allocated using malloc. Replacing "delete[] x;" to "free(x);" at line 52 resolves this issue.

Finally, Valgrind it gives the following output,

        g++ -g val_test01_solved.cpp -o val_test01_solved && valgrind --leak-check=full --track-origins=yes ./val_test01_solved
        ==1927== Memcheck, a memory error detector
        ==1927== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
        ==1927== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
        ==1927== Command: ./val_test01_solved
        ==1927== 

        TEST01
        C++ version.
        A sample code for analysis by VALGRIND.
        0  1
        1  1
        2  2
        3  3
        4  5
        5  8
        6  13
        7  21
        8  34
        9  55

        TEST01
        Normal end of execution.
        ==1927== 
        ==1927== HEAP SUMMARY:
        ==1927==     in use at exit: 0 bytes in 0 blocks
        ==1927==   total heap usage: 1 allocs, 1 frees, 40 bytes allocated
        ==1927== 
        ==1927== All heap blocks were freed -- no leaks are possible
        ==1927== 
        ==1927== For lists of detected and suppressed errors, rerun with: -s
        ==1927== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
