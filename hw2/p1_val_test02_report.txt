Using Valgrind, it outputs the following.

        g++ -g val_test02_solved.cpp -o val_test02_solved && valgrind --leak-check=full --track-origins=yes ./val_test02_solved
        ==6149== Memcheck, a memory error detector
        ==6149== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
        ==6149== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
        ==6149== Command: ./val_test02_solved
        ==6149== 

        TEST02:
        C++ version
        A sample code for analysis by VALGRIND.
        0  0
        1  2
        ==6149== Conditional jump or move depends on uninitialised value(s)
        ==6149==    at 0x4EC171E: std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib64/libstdc++.so.6.0.19)
        ==6149==    by 0x4EC1CFC: std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib64/libstdc++.so.6.0.19)
        ==6149==    by 0x4ECE06D: std::ostream& std::ostream::_M_insert<long>(long) (in /usr/lib64/libstdc++.so.6.0.19)
        ==6149==    by 0x40094E: junk_data() (val_test02_solved.cpp:47)
        ==6149==    by 0x400821: main (val_test02_solved.cpp:16)
        ==6149==  Uninitialised value was created by a heap allocation
        ==6149==    at 0x4C2AC38: operator new[](unsigned long) (vg_replace_malloc.c:433)
        ==6149==    by 0x400868: junk_data() (val_test02_solved.cpp:30)
        ==6149==    by 0x400821: main (val_test02_solved.cpp:16)
        ==6149== 
        ==6149== Use of uninitialised value of size 8
        ==6149==    at 0x4EC1603: ??? (in /usr/lib64/libstdc++.so.6.0.19)
        ==6149==    by 0x4EC1745: std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib64/libstdc++.so.6.0.19)
        ==6149==    by 0x4EC1CFC: std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib64/libstdc++.so.6.0.19)
        ==6149==    by 0x4ECE06D: std::ostream& std::ostream::_M_insert<long>(long) (in /usr/lib64/libstdc++.so.6.0.19)
        ==6149==    by 0x40094E: junk_data() (val_test02_solved.cpp:47)
        ==6149==    by 0x400821: main (val_test02_solved.cpp:16)
        ==6149==  Uninitialised value was created by a heap allocation
        ==6149==    at 0x4C2AC38: operator new[](unsigned long) (vg_replace_malloc.c:433)
        ==6149==    by 0x400868: junk_data() (val_test02_solved.cpp:30)
        ==6149==    by 0x400821: main (val_test02_solved.cpp:16)
        ==6149== 
        ==6149== Conditional jump or move depends on uninitialised value(s)
        ==6149==    at 0x4EC160F: ??? (in /usr/lib64/libstdc++.so.6.0.19)
        ==6149==    by 0x4EC1745: std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib64/libstdc++.so.6.0.19)
        ==6149==    by 0x4EC1CFC: std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib64/libstdc++.so.6.0.19)
        ==6149==    by 0x4ECE06D: std::ostream& std::ostream::_M_insert<long>(long) (in /usr/lib64/libstdc++.so.6.0.19)
        ==6149==    by 0x40094E: junk_data() (val_test02_solved.cpp:47)
        ==6149==    by 0x400821: main (val_test02_solved.cpp:16)
        ==6149==  Uninitialised value was created by a heap allocation
        ==6149==    at 0x4C2AC38: operator new[](unsigned long) (vg_replace_malloc.c:433)
        ==6149==    by 0x400868: junk_data() (val_test02_solved.cpp:30)
        ==6149==    by 0x400821: main (val_test02_solved.cpp:16)
        ==6149== 
        ==6149== Conditional jump or move depends on uninitialised value(s)
        ==6149==    at 0x4EC1773: std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib64/libstdc++.so.6.0.19)
        ==6149==    by 0x4EC1CFC: std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib64/libstdc++.so.6.0.19)
        ==6149==    by 0x4ECE06D: std::ostream& std::ostream::_M_insert<long>(long) (in /usr/lib64/libstdc++.so.6.0.19)
        ==6149==    by 0x40094E: junk_data() (val_test02_solved.cpp:47)
        ==6149==    by 0x400821: main (val_test02_solved.cpp:16)
        ==6149==  Uninitialised value was created by a heap allocation
        ==6149==    at 0x4C2AC38: operator new[](unsigned long) (vg_replace_malloc.c:433)
        ==6149==    by 0x400868: junk_data() (val_test02_solved.cpp:30)
        ==6149==    by 0x400821: main (val_test02_solved.cpp:16)
        ==6149== 
        2  0
        3  6
        4  8
        5  0
        6  0
        7  0
        8  0
        9  0

        TEST02
        Normal end of execution.
        ==6149== 
        ==6149== HEAP SUMMARY:
        ==6149==     in use at exit: 0 bytes in 0 blocks
        ==6149==   total heap usage: 1 allocs, 1 frees, 40 bytes allocated
        ==6149== 
        ==6149== All heap blocks were freed -- no leaks are possible
        ==6149== 
        ==6149== For lists of detected and suppressed errors, rerun with: -s
        ==6149== ERROR SUMMARY: 24 errors from 4 contexts (suppressed: 0 from 0)

There are couple of errors regarding uninitialised values at line 30, where the x array is not fully initialised.
From changing "i < 5" to "i < 10"

        ==6354== Memcheck, a memory error detector
        ==6354== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
        ==6354== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
        ==6354== Command: ./val_test02_solved
        ==6354== 

        TEST02:
        C++ version
        A sample code for analysis by VALGRIND.
        0  0
        1  2
        2  14
        3  6
        4  8
        5  12
        6  12
        7  14
        8  16
        9  18

        TEST02
        Normal end of execution.
        ==6354== 
        ==6354== HEAP SUMMARY:
        ==6354==     in use at exit: 0 bytes in 0 blocks
        ==6354==   total heap usage: 1 allocs, 1 frees, 40 bytes allocated
        ==6354== 
        ==6354== All heap blocks were freed -- no leaks are possible
        ==6354== 
        ==6354== For lists of detected and suppressed errors, rerun with: -s
        ==6354== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)